[{"/home/burslf/ITC/react/projects/react-project-1/src/Components/App.js":"1","/home/burslf/ITC/react/projects/react-project-1/src/Components/Notes.js":"2","/home/burslf/ITC/react/projects/react-project-1/src/Components/NoteBody.js":"3","/home/burslf/ITC/react/projects/react-project-1/src/Components/Form.js":"4","/home/burslf/ITC/react/projects/react-project-1/src/index.js":"5","/home/burslf/ITC/react/projects/react-project-1/src/Components/MonModal.js":"6"},{"size":3090,"mtime":1606912519338,"results":"7","hashOfConfig":"8"},{"size":7237,"mtime":1606821233209,"results":"9","hashOfConfig":"8"},{"size":1288,"mtime":1606912498111,"results":"10","hashOfConfig":"8"},{"size":1874,"mtime":1606810045936,"results":"11","hashOfConfig":"8"},{"size":179,"mtime":1606912494844,"results":"12","hashOfConfig":"8"},{"size":4462,"mtime":1606649530259,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7xtf5l",{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/burslf/ITC/react/projects/react-project-1/src/Components/App.js",[],"/home/burslf/ITC/react/projects/react-project-1/src/Components/Notes.js",["27","28","29","30"],"import React, { Component } from 'react'\nimport NoteBody from './NoteBody'\nimport MonModal from './MonModal'\nimport MyForm from './Form'\nimport localforage from 'localforage'\n\n\nclass Notes extends Component {\n\n    state = {\n        notes: [],\n        isModalOpen: false,\n        newNote: {\n            id: '',\n            title: '',\n            note: '',\n            date: '',\n        },\n        modalText : {\n            id: '',\n            title: '',\n            note: '',\n            date: '',\n        },\n        count: 0,\n    }\n    handleSubmit = (note) => {\n        console.log(`Note that has been submited : `)\n        console.log(note)\n        localforage.setItem(`${note.id}`, note)\n        .then(data => console.log(data))\n\n        this.setState({notes: [...this.state.notes, note]})\n    }\n\n    openModal = (note, index) => {\n        this.setState({\n            isModalOpen: true,\n            modalText : {\n                id: index,\n                title: note.title,\n                note: note.note,\n                date: note.date\n            }\n        })\n    }\n    closeModal = () => {\n        this.setState({\n            isModalOpen: false,\n            modalText : {\n                id: '',\n                title: '',\n                note: '',\n                date: ''\n            }\n        })\n    }\n\n    handleTitleModalChange = (e) => {\n        e.preventDefault()\n        this.setState({            \n            modalText : {\n                id: this.state.modalText.id,\n                title:  e.target.value,\n                note:  this.state.modalText.note,\n                date:  this.state.modalText.date\n             }\n        })\n    }\n\n    handleNoteModalChange = (e) => {\n        e.preventDefault()\n        this.setState({            \n            modalText : {\n                id: this.state.modalText.id,\n                title:  this.state.modalText.title,\n                note:  e.target.value,\n                date:  this.state.modalText.date\n             }\n        })\n    }\n\n    editTheModal = () => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        this.setState({ \n                notes : this.state.notes.filter(note => {\n                         if (note.id === this.state.modalText.id) {\n                            {\n                            note.title = this.state.modalText.title\n                            note.note = this.state.modalText.note\n                            note.updated = `${getDate()} ${getHour()}`\n                            }\n                        }  \n                        return note\n                        }),\n                isModalOpen: false,\n        })\n    }\n\n    removeCharacter = () => {\n        const {notes} = this.state\n        console.log(this.state.modalText)\n        this.setState({count: this.state.count-1, notes: notes.filter((notes, i) => i !== this.state.modalText.id), isModalOpen:false})\n    }\n\n    // FORM \n    handleTitleChange = (e) => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        const name = e.target.name\n        const value = e.target.value\n        this.setState({newNote : {\n                                    note: this.state.newNote.note,\n                                    title : value,\n                                    date: `${getDate()}`,\n                                    id: this.state.count}\n        })\n    }\n\n    handleNoteChange = (e) => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        const value = e.target.value\n        this.setState({newNote : {\n                                    title: this.state.newNote.title,\n                                    note : value,\n                                    date: `${getDate()}`,\n                                    id: this.state.count}\n        })\n    }\n\n    submitNote = async (e) => {\n        e.preventDefault()\n        if(this.state.newNote.note !== '' && this.state.newNote.title !== '') {\n            this.setState({            \n                count: this.state.count + 1\n            })\n            this.handleSubmit(this.state.newNote)\n            this.setState( {newNote: {date: '', title: '', note: '', id: ''}})\n        }\n    }\n\n    render() {\n        const {notes} = this.state\n\n           return (\n               <div className=\"container-fluid\">\n                  <MyForm \n                     notes={notes}\n                     modalText={this.state.modalText}\n                     handleSubmit={this.handleSubmit} \n                     titlePlaceholder=\"Give a title...\" \n                     notePlaceholder=\"Write here\"\n                     handleTitleChange = {this.handleTitleChange}\n                     handleNoteChange={this.handleNoteChange}\n                     titleValue={this.state.newNote.title}\n                     noteValue={this.state.newNote.note}\n                     submitNote={this.submitNote}\n                     titleId=\"new-title\"\n                     noteId=\"new-note\"\n                     buttonValue={<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-2 -2 24 24\" width=\"24\" height=\"24\" preserveAspectRatio=\"xMinYMin\" className=\"icon__icon addIcon\"><path d=\"M11 11h4a1 1 0 0 0 0-2h-4V5a1 1 0 0 0-2 0v4H5a1 1 0 1 0 0 2h4v4a1 1 0 0 0 2 0v-4zm-1 9C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10z\"></path></svg>}\n                     buttonId=\"addButton\"\n                     formContainerId=\"addNoteContainer\"\n                     dayMode = {this.props.dayMode}\n                     darkTheme = 'darkTheme'\n                  />\n                  <div className=\"maNoteContainer\">\n                    <NoteBody \n                    notes={notes} \n                    openModal={(row, index) => this.openModal(row, index)}\n                    dayMode = {this.props.dayMode}\n                    darkTheme = 'darkTheme-noteBody'\n                    />\n                    <MonModal \n                    notes={notes} \n                    isModalOpen={this.state.isModalOpen} \n                    closeModal={this.closeModal} \n                    infos={this.state.modalText} \n                    removeCharacter={() => this.removeCharacter()}\n                    handleNoteModalChange={this.handleNoteModalChange}\n                    handleTitleModalChange={this.handleTitleModalChange}\n                    editTheModal={() => this.editTheModal()}\n                    dayMode = {this.props.dayMode}\n                    /> \n                </div>\n               </div>\n               \n        )\n}\n}\nexport default Notes","/home/burslf/ITC/react/projects/react-project-1/src/Components/NoteBody.js",["31"],"/home/burslf/ITC/react/projects/react-project-1/src/Components/Form.js",[],"/home/burslf/ITC/react/projects/react-project-1/src/index.js",[],"/home/burslf/ITC/react/projects/react-project-1/src/Components/MonModal.js",[],{"ruleId":"32","severity":1,"message":"33","line":96,"column":29,"nodeType":"34","messageId":"35","endLine":100,"endColumn":30},{"ruleId":"36","severity":1,"message":"37","line":121,"column":15,"nodeType":"38","messageId":"39","endLine":121,"endColumn":22},{"ruleId":"36","severity":1,"message":"40","line":125,"column":15,"nodeType":"38","messageId":"39","endLine":125,"endColumn":19},{"ruleId":"36","severity":1,"message":"37","line":141,"column":15,"nodeType":"38","messageId":"39","endLine":141,"endColumn":22},{"ruleId":"41","severity":1,"message":"42","line":5,"column":3,"nodeType":"43","messageId":"44","endLine":7,"endColumn":4},"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'getHour' is assigned a value but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]