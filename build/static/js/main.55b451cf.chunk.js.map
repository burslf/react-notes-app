{"version":3,"sources":["Components/NoteBody.js","Components/Form.js","Components/MonModal.js","Components/Notes.js","Components/App.js","index.js"],"names":["NoteBody","props","dayOrNight","dayMode","darkTheme","allNotes","localforage","length","then","data","i","getItem","push","this","notes","map","row","index","className","id","onClick","openModal","date","title","note","Component","Form","state","count","dayOrNightButton","formContainerId","FormControl","type","name","titleId","value","titleValue","onChange","e","handleTitleChange","maxLength","placeholder","titlePlaceholder","onKeyDown","event","key","document","querySelector","preventDefault","as","noteId","noteValue","handleNoteChange","notePlaceholder","rows","textAreaRows","Button","submitNote","buttonId","buttonValue","MonModal","isModalOpen","modalText","lines","target","setState","d","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getHour","Modal","setAppElement","style","overlay","backgroundColor","content","top","left","right","bottom","marginRight","transform","width","height","color","border","borderRadius","isOpen","infos","handleTitleModalChange","handleNoteModalChange","editTheModal","xmlns","viewBox","preserveAspectRatio","removeCharacter","closeModal","Notes","newNote","handleSubmit","console","log","setItem","filter","updated","a","App","handleDay","classList","add","remove","transition","handleNight","dayOrNightIcons","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.55b451cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport localforage from \"localforage\";\n\nclass NoteBody extends Component {\n  constructor(props) {\n    super(props);\n  }\n  dayOrNight = () => {\n    if (this.props.dayMode) {\n      return this.props.darkTheme;\n    } else {\n      return \"\";\n    }\n  };\n  render() {\n    let allNotes = [];\n    localforage.length().then((data) => {\n      for (let i = 0; i < data; i++) {\n        localforage.getItem(`${i}`).then((data) => allNotes.push(data));\n      }\n    });\n    const singleNote = this.props.notes.map((row, index) => {\n      return (\n        <div className='noteContainer' key={index}>\n          <div\n            className='maNote'\n            id={this.dayOrNight()}\n            onClick={() => this.props.openModal(row, index)}\n          >\n            <div className='date'>\n              <span className='hour'>Created: {row.date}</span>\n              {/* <div>{this.props.updated}</div> */}\n            </div>\n            <h2 className='noteTiItle'>{row.title}</h2>\n            <div\n              className='noteContent'\n              onClick={() => this.props.openModal(row, index)}\n            >\n              {row.note}\n            </div>\n          </div>\n        </div>\n      );\n    });\n    return singleNote;\n  }\n}\n\nexport default NoteBody;\n","import React, { Component } from 'react'\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport FormControl from 'react-bootstrap/FormControl'\n\nclass Form extends Component {\n\n    state = {\n        title: '',\n        note: '',\n        date: '',\n        id: '',\n        count: 0,\n    }\n    dayOrNight = () => {\n      if(this.props.dayMode) {\n          return this.props.darkTheme\n      } \n      else {\n          return ''\n      }\n  }\n  \n  dayOrNightButton = () => {\n    if(this.props.dayMode) {\n      return `darkTheme-button-form`\n  } \n  else {\n      return ''\n  }\n  }\n    render() {\n        return(\n            <form className={`form-container ${this.props.formContainerId}`} id={this.dayOrNight()}>\n            <FormControl\n              type=\"text\"\n              name=\"title\"\n              id={this.props.titleId}\n              value={this.props.titleValue}\n              onChange={(e) => this.props.handleTitleChange(e)} \n              maxLength={14}\n              placeholder={this.props.titlePlaceholder}\n              onKeyDown={(event) => {\n                if(event.key === \"Enter\") {\n                    document.querySelector('#note')\n                    event.preventDefault();\n                    return false;\n                 }\n              }}\n            />\n            <FormControl\n              as=\"textarea\"\n              name=\"note\"\n              id={this.props.noteId}\n              value={this.props.noteValue}\n              onChange={(e) => this.props.handleNoteChange(e)} \n              placeholder={this.props.notePlaceholder}\n              rows={this.props.textAreaRows}\n              />\n              <Button className={this.dayOrNightButton()} onClick={(e) => this.props.submitNote(e)} id={this.props.buttonId}>{this.props.buttonValue}</Button>\n          </form>\n        )\n    }\n\n}\n\nexport default Form","import React, { Component } from 'react'\nimport Modal from 'react-modal'\nimport Button from 'react-bootstrap/Button';\nimport MonForm from './Form'\n\nclass MonModal extends Component {\n    state = {\n            notes: [],\n            isModalOpen: false,\n            modalText : {\n                id: '',\n                title: '',\n                note: '',\n                date: ''\n            },\n            count: 0,\n            lines : 0,\n    }\n    handleTitleChange = (e) => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        const value = e.target.value\n        this.setState({modalText : {\n                                    note: this.state.modalText.note,\n                                    title : value,\n                                    date: `${getDate()} ${getHour()}`,\n                                    id: this.state.count}\n        })\n    }\n\n    dayOrNight = () => {\n        if(this.props.dayMode) {\n            return 'white'\n        } else {\n            return 'black'\n        }\n    }\n\n    dayOrNightButton = () => {\n        if(this.props.dayMode) {\n          return `deleteButton darkTheme-button-form`\n      } \n      else {\n          return 'deleteButton'\n      }\n      }\n\nrender() {\n    const {isModalOpen} = this.props\n    Modal.setAppElement('#root')\n\n    return (\n        <Modal\n            style={\n                {\n                    overlay: {\n                        backgroundColor: '#000000de'\n                    },\n                    content: {\n                        top                   : '50%',\n                        left                  : '50%',\n                        right                 : 'auto',\n                        bottom                : 'auto',\n                        marginRight           : '-50%',\n                        transform             : 'translate(-50%, -50%)',\n                        width: '90vw',\n                        height: '90vh',\n                        backgroundColor: this.dayOrNight(),\n                        color: 'black',\n                        border: '3px solid rgba(104, 207, 255, 0.885)',\n                        borderRadius: '12px'\n                    }\n                }\n            }\n            isOpen={isModalOpen}\n            >   \n\n            <div className=\"date\">\n                        <span className=\"hour\">{this.props.infos.date}</span>\n                </div>\n                <MonForm \n                    titleValue={this.props.infos.title}\n                    noteValue={this.props.infos.note}\n                    handleTitleChange={(e)=>this.props.handleTitleModalChange(e)}\n                    handleNoteChange={(e) => this.props.handleNoteModalChange(e)}\n                    titleId=\"title-modal-input\"\n                    noteId=\"note-modal-input\"\n                    submitNote={() => this.props.editTheModal()}\n                    buttonValue={<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-5 -7 24 24\" width=\"24\" height=\"24\" preserveAspectRatio=\"xMinYMin\" className=\"icon__icon\"><path d=\"M5.486 9.73a.997.997 0 0 1-.707-.292L.537 5.195A1 1 0 1 1 1.95 3.78l3.535 3.535L11.85.952a1 1 0 0 1 1.415 1.414L6.193 9.438a.997.997 0 0 1-.707.292z\"></path></svg>}\n                    buttonId=\"edit-note\"\n                    textAreaRows={5}\n                    darkTheme = 'darkTheme'\n                    dayMode = {this.props.dayMode}\n                />\n                <Button className={this.dayOrNightButton()} onClick={() => this.props.removeCharacter()}><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-3 -2 24 24\" width=\"24\" height=\"24\" preserveAspectRatio=\"xMinYMin\" className=\"icon__icon\"><path d=\"M6 2V1a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1h4a2 2 0 0 1 2 2v1a2 2 0 0 1-2 2h-.133l-.68 10.2a3 3 0 0 1-2.993 2.8H5.826a3 3 0 0 1-2.993-2.796L2.137 7H2a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4zm10 2H2v1h14V4zM4.141 7l.687 10.068a1 1 0 0 0 .998.932h6.368a1 1 0 0 0 .998-.934L13.862 7h-9.72zM7 8a1 1 0 0 1 1 1v7a1 1 0 0 1-2 0V9a1 1 0 0 1 1-1zm4 0a1 1 0 0 1 1 1v7a1 1 0 0 1-2 0V9a1 1 0 0 1 1-1z\"></path></svg></Button>\n                <Button className=\"closeModalButton\" onClick={() => this.props.closeModal()}> X </Button>\n               \n            </Modal>\n    )\n}\n\n}\n\nexport default MonModal","import React, { Component } from 'react'\nimport NoteBody from './NoteBody'\nimport MonModal from './MonModal'\nimport MyForm from './Form'\nimport localforage from 'localforage'\n\n\nclass Notes extends Component {\n\n    state = {\n        notes: [],\n        isModalOpen: false,\n        newNote: {\n            id: '',\n            title: '',\n            note: '',\n            date: '',\n        },\n        modalText : {\n            id: '',\n            title: '',\n            note: '',\n            date: '',\n        },\n        count: 0,\n    }\n    handleSubmit = (note) => {\n        console.log(`Note that has been submited : `)\n        console.log(note)\n        localforage.setItem(`${note.id}`, note)\n        .then(data => console.log(data))\n\n        this.setState({notes: [...this.state.notes, note]})\n    }\n\n    openModal = (note, index) => {\n        this.setState({\n            isModalOpen: true,\n            modalText : {\n                id: index,\n                title: note.title,\n                note: note.note,\n                date: note.date\n            }\n        })\n    }\n    closeModal = () => {\n        this.setState({\n            isModalOpen: false,\n            modalText : {\n                id: '',\n                title: '',\n                note: '',\n                date: ''\n            }\n        })\n    }\n\n    handleTitleModalChange = (e) => {\n        e.preventDefault()\n        this.setState({            \n            modalText : {\n                id: this.state.modalText.id,\n                title:  e.target.value,\n                note:  this.state.modalText.note,\n                date:  this.state.modalText.date\n             }\n        })\n    }\n\n    handleNoteModalChange = (e) => {\n        e.preventDefault()\n        this.setState({            \n            modalText : {\n                id: this.state.modalText.id,\n                title:  this.state.modalText.title,\n                note:  e.target.value,\n                date:  this.state.modalText.date\n             }\n        })\n    }\n\n    editTheModal = () => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        this.setState({ \n                notes : this.state.notes.filter(note => {\n                         if (note.id === this.state.modalText.id) {\n                            {\n                            note.title = this.state.modalText.title\n                            note.note = this.state.modalText.note\n                            note.updated = `${getDate()} ${getHour()}`\n                            }\n                        }  \n                        return note\n                        }),\n                isModalOpen: false,\n        })\n    }\n\n    removeCharacter = () => {\n        const {notes} = this.state\n        console.log(this.state.modalText)\n        this.setState({count: this.state.count-1, notes: notes.filter((notes, i) => i !== this.state.modalText.id), isModalOpen:false})\n    }\n\n    // FORM \n    handleTitleChange = (e) => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        const name = e.target.name\n        const value = e.target.value\n        this.setState({newNote : {\n                                    note: this.state.newNote.note,\n                                    title : value,\n                                    date: `${getDate()}`,\n                                    id: this.state.count}\n        })\n    }\n\n    handleNoteChange = (e) => {\n        const getDate = () => {\n            const d = new Date();\n            return `${d.getFullYear()}/${d.getMonth()}/${d.getDate()}`\n        }\n        \n        const getHour = () => {\n            const d = new Date();\n            return `${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`\n        }\n        const value = e.target.value\n        this.setState({newNote : {\n                                    title: this.state.newNote.title,\n                                    note : value,\n                                    date: `${getDate()}`,\n                                    id: this.state.count}\n        })\n    }\n\n    submitNote = async (e) => {\n        e.preventDefault()\n        if(this.state.newNote.note !== '' && this.state.newNote.title !== '') {\n            this.setState({            \n                count: this.state.count + 1\n            })\n            this.handleSubmit(this.state.newNote)\n            this.setState( {newNote: {date: '', title: '', note: '', id: ''}})\n        }\n    }\n\n    render() {\n        const {notes} = this.state\n\n           return (\n               <div className=\"container-fluid\">\n                  <MyForm \n                     notes={notes}\n                     modalText={this.state.modalText}\n                     handleSubmit={this.handleSubmit} \n                     titlePlaceholder=\"Give a title...\" \n                     notePlaceholder=\"Write here\"\n                     handleTitleChange = {this.handleTitleChange}\n                     handleNoteChange={this.handleNoteChange}\n                     titleValue={this.state.newNote.title}\n                     noteValue={this.state.newNote.note}\n                     submitNote={this.submitNote}\n                     titleId=\"new-title\"\n                     noteId=\"new-note\"\n                     buttonValue={<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-2 -2 24 24\" width=\"24\" height=\"24\" preserveAspectRatio=\"xMinYMin\" className=\"icon__icon addIcon\"><path d=\"M11 11h4a1 1 0 0 0 0-2h-4V5a1 1 0 0 0-2 0v4H5a1 1 0 1 0 0 2h4v4a1 1 0 0 0 2 0v-4zm-1 9C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10z\"></path></svg>}\n                     buttonId=\"addButton\"\n                     formContainerId=\"addNoteContainer\"\n                     dayMode = {this.props.dayMode}\n                     darkTheme = 'darkTheme'\n                  />\n                  <div className=\"maNoteContainer\">\n                    <NoteBody \n                    notes={notes} \n                    openModal={(row, index) => this.openModal(row, index)}\n                    dayMode = {this.props.dayMode}\n                    darkTheme = 'darkTheme-noteBody'\n                    />\n                    <MonModal \n                    notes={notes} \n                    isModalOpen={this.state.isModalOpen} \n                    closeModal={this.closeModal} \n                    infos={this.state.modalText} \n                    removeCharacter={() => this.removeCharacter()}\n                    handleNoteModalChange={this.handleNoteModalChange}\n                    handleTitleModalChange={this.handleTitleModalChange}\n                    editTheModal={() => this.editTheModal()}\n                    dayMode = {this.props.dayMode}\n                    /> \n                </div>\n               </div>\n               \n        )\n}\n}\nexport default Notes","import React, {Component} from 'react'\nimport Notes from './Notes'\nclass App extends Component {\n\n    state = {\n        dayMode: false\n    }\n\n    handleDay = () => {\n        this.setState({dayMode: true})\n        document.querySelector('.icon__icon.day').classList.add('display-none')\n        document.querySelector('.icon__icon.night').classList.remove('display-none')\n        document.querySelector('body').style.transition = \"0.5s background-color\"\n        document.querySelector('body').style.backgroundColor = \"white\"\n    }\n\n    handleNight = () => {\n        this.setState({dayMode: false})\n        document.querySelector('.icon__icon.night').classList.add('display-none')\n        document.querySelector('.icon__icon.day').classList.remove('display-none')\n    }\n\n    dayOrNight = () => {\n        if(this.state.dayMode) {\n            return 'darkTheme-app-title'\n        } else {\n            return ''\n        }\n    }\n    dayOrNightIcons = () => {\n        if(this.state.dayMode) {\n            return 'darkTheme-app-icons'\n        } else {\n            return ''\n        }\n    }\n    render() {\n        if(!this.state.dayMode) {\n            document.querySelector('body').style.backgroundColor = \"black\"  \n        }\n        return (\n                <div>\n                    <div className=\"dayNightMode\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-4 -2 24 24\" width=\"24\" height=\"24\" preserveAspectRatio=\"xMinYMin\" className=\"icon__icon night nightIcon display-none\" onClick={() => this.handleNight()} id={this.dayOrNightIcons()}><path d=\"M2 10c0 4.43 3.478 8 7.742 8 .658 0 1.302-.085 1.922-.248-2.996-2.2-4.896-5.786-4.896-9.752 0-2.09.527-4.095 1.489-5.853C4.699 2.863 2 6.097 2 10zm6.768-2c0 4.632 3.068 8.528 7.232 9.665A9.555 9.555 0 0 1 9.742 20C4.362 20 0 15.523 0 10S4.362 0 9.742 0c.868 0 1.71.117 2.511.335A10.086 10.086 0 0 0 8.768 8z\"></path></svg>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"-2 -2 24 24\" width=\"24\" height=\"24\" preserveAspectRatio=\"xMinYMin\" className=\"icon__icon day dayIcon\" onClick={() => this.handleDay()} id={this.dayOrNightIcons()}><path d=\"M10 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0 2a5 5 0 1 1 0-10 5 5 0 0 1 0 10zm0-15a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0V1a1 1 0 0 1 1-1zm0 16a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1zM1 9h2a1 1 0 1 1 0 2H1a1 1 0 0 1 0-2zm16 0h2a1 1 0 0 1 0 2h-2a1 1 0 0 1 0-2zm.071-6.071a1 1 0 0 1 0 1.414l-1.414 1.414a1 1 0 1 1-1.414-1.414l1.414-1.414a1 1 0 0 1 1.414 0zM5.757 14.243a1 1 0 0 1 0 1.414L4.343 17.07a1 1 0 1 1-1.414-1.414l1.414-1.414a1 1 0 0 1 1.414 0zM4.343 2.929l1.414 1.414a1 1 0 0 1-1.414 1.414L2.93 4.343A1 1 0 0 1 4.343 2.93zm11.314 11.314l1.414 1.414a1 1 0 0 1-1.414 1.414l-1.414-1.414a1 1 0 1 1 1.414-1.414z\"></path></svg>\n                    </div>  \n           \n                    <div className=\"app-title-container\">\n                         <h2 className=\"app-title\" id={this.dayOrNight()}>Yote</h2>\n                    </div>\n\n                    <Notes dayMode={this.state.dayMode}/>\n                </div>\n        )\n    }\n}\n\nexport default App","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}